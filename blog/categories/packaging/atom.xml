<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Thema: Packaging | Was ich so treibe...]]></title>
  <link href="http://uli-heller.github.com/blog/categories/packaging/atom.xml" rel="self"/>
  <link href="http://uli-heller.github.com/"/>
  <updated>2014-03-24T10:02:27+01:00</updated>
  <id>http://uli-heller.github.com/</id>
  <author>
    <name><![CDATA[Uli Heller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kompilierung und Tests überspringen beim Paketbau]]></title>
    <link href="http://uli-heller.github.com/blog/2013/10/04/kompilierung-ueberspringen/"/>
    <updated>2013-10-04T09:00:00+02:00</updated>
    <id>http://uli-heller.github.com/blog/2013/10/04/kompilierung-ueberspringen</id>
    <content type="html"><![CDATA[<p>Gelegentlich baue ich selbst Pakete für Debian/Ubuntu. Manchmal habe ich dabei Tippfehler
in Paketbeschreibungsdateien wie &ldquo;debian/rules&rdquo; und &ldquo;debian/control&rdquo;. Diese treten oftmals erst
gegen Ende des Paketbauprozesses auf und nach einer Korrektur der Fehler habe ich gerne schnell
Gewissheit, ob die Korrekturen OK sind oder nicht &ndash; ein kompletter Neubau scheidet für die
meisten Pakete dann aus.</p>

<p>Mit diesem Befehl werden Kompilierung und Übersprungen:</p>

<pre><code>fakeroot debuan/rules binary
</code></pre>

<p>Innerhalb von wenigen Sekunden weiß ich so, ob die Korrekturen richtig waren oder ob ich noch
weitere Dinge ändern muß. Wenn das Kommando durchläuft, führe ich idR. nochmals</p>

<pre><code>dpkg-buildpackage
</code></pre>

<p>aus um das Paket komplett neu zu bauen und zu paketieren.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abhängigkeiten für Debian-Paketbau installieren]]></title>
    <link href="http://uli-heller.github.com/blog/2013/06/01/build-dependencies/"/>
    <updated>2013-06-01T17:30:00+02:00</updated>
    <id>http://uli-heller.github.com/blog/2013/06/01/build-dependencies</id>
    <content type="html"><![CDATA[<p>Normalerweise spiele ich alle zum Bau eines Debian-Paketes notwendigen
Programme ein mittels <code>sudo apt-get build-dep {paketname}</code>. Blöderweise
geht das nicht, wenn das zu bauende Paket nicht aus einem
Repository &ldquo;geladen&rdquo; werden soll, so zum Beispiel wenn ich nur die
Quelltexte und die DSC-Datei des Paketes vorliegen habe.</p>

<p>Nachfolgend beschreibe ich am Beispiel von MUFFIN, wie man die Pakete
dennoch ohne allzuviel Tipparbeit installieren kann.</p>

<!-- more -->


<h2>Quelltexte herunterladen</h2>

<p>Beispielsweise von <a href="https://github.com/linuxmint/muffin/archive/1.8.2.tar.gz">https://github.com/linuxmint/muffin/archive/1.8.2.tar.gz</a></p>

<h2>Quelltexte entpacken</h2>

<ul>
<li><code>gzip -cd muffin-1.8.2.tar.gz|tar xf -</code></li>
<li><code>cd muffin-1.8.2</code></li>
</ul>


<h2>Abhängigkeiten anzeigen</h2>

<ul>
<li><code>dpkg-buildpackage</code></li>
</ul>


<p>&hellip; liefert eine Ausgabe der Art:</p>

<p><code>
...
dpkg-checkbuilddeps: Unmet build dependencies: debhelper (&gt;= 8) dh-autoreconf intltool (&gt;= 0.34.90) libgtk-3-dev (&gt;= 3.0.8-1~) libcanberra-gtk3-dev gobject-introspection (&gt;= 0.9.12-5~) libgirepository1.0-dev (&gt;= 0.9.12) libjson-glib-dev (&gt;= 0.13.2-1~) libclutter-1.0-dev (&gt;= 1.7.5) libpango1.0-dev (&gt;= 1.2.0) libgconf2-dev (&gt;= 2.6.1-2) libglib2.0-dev (&gt;= 2.6.0) libstartup-notification0-dev (&gt;= 0.7) libxcomposite-dev (&gt;= 1:0.2) libxfixes-dev libxrender-dev libxdamage-dev libxcursor-dev libxinerama-dev libxext-dev libxrandr-dev gnome-doc-utils (&gt;= 0.8) gnome-pkg-tools (&gt;= 0.10) gsettings-desktop-schemas-dev (&gt;= 3.3.0)
</code></p>

<h2>Abhängigkeiten installieren</h2>

<pre><code>dpkg-checkbuilddeps 2&gt;&amp;1 \
| sed                    \
  -e "s/^.*: //"         \
  -e "s/([^(]*)//g"      \
|sudo xargs apt-get install -y
</code></pre>

<h2>Paket bauen</h2>

<ul>
<li><code>dpkg-buildpackage</code></li>
</ul>


<p>&hellip; läuft nun durch!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dovecot: Aktualisierung mit Pigeonhole]]></title>
    <link href="http://uli-heller.github.com/blog/2013/04/19/pigeonhole/"/>
    <updated>2013-04-19T06:00:00+02:00</updated>
    <id>http://uli-heller.github.com/blog/2013/04/19/pigeonhole</id>
    <content type="html"><![CDATA[<h1>Dovecot: Aktualisierung des Debian-Paketes mit Pigeonhole</h1>

<p>Gestern oder heute wurde die Version 2.2.1 von Dovecot veröffentlicht.
Natürlich habe ich gleich versucht, mein Debian-Paket zu aktualisieren:</p>

<ul>
<li><code>cd .../dovecot-2.2.0</code></li>
<li><code>uupdate -u ../dovecot-2.2.1.tar.gz</code></li>
<li><code>cd ../dovecot-2.2.1</code></li>
<li><code>dpkg-buildpackage</code></li>
</ul>


<p>Dummerweise klappt das nicht! Pigeonhole scheint zu fehlen, so dass
schon die Anwendung der Quilt-Patches scheitert.</p>

<!-- more -->


<p>Mein Dovecot-Debian-Paket beinhaltet u.a. auch Pigeonhole.
Pigeonhole wird separat zum Herunterladen angeboten, im Debian-Paket
erscheint es aber als Patch unterhalb von debian/patches. Das ist ein
gewisses Problem, weil man das heruntergeladene Paket dann immer erst
in einen Patch umwandeln muß.</p>

<p>Deshalb mein Ziel: Ich würde das Pigeonhole-Paket gerne möglichst
unverändert in&rsquo;s Dovecot-Debian-Paket einbinden!</p>

<!-- more -->


<h2>Ausgangspunkt</h2>

<p>Ausgangspunkt ist das bestehende Dovecot-Debian-Paket in der Version 2.2.0.
Es kann mit <code>dpkg-buildpackage</code> neu erzeugt werden.</p>

<p>Wir wissen, dass es eine neue Version 2.2.1 von Dovecot gibt. Die haben wir
auch schon heruntergeladen. Von Pigeonhole gibt es keine neue Version, also
verwenden wir die alte einfach weiter.</p>

<h2>Pigeonhole vorbereiten</h2>

<ul>
<li><code>cp dovecot_2.2.0.orig-pigeonhole.tar.bz2  dovecot_2.2.1.orig-pigeonhole.tar.bz2</code></li>
</ul>


<h2>Dovecot vorbereiten</h2>

<ul>
<li><code>cd .../dovecot-2.2.0</code></li>
<li><code>uupdate -u ../dovecot-2.2.1.tar.gz</code></li>
<li><code>cd ../dovecot-2.2.1</code></li>
</ul>


<h2>Dovecot/Pigeonhole sichten</h2>

<p>Prüfen: Gibt es innerhalb des Dovecot-Verzeichnisses nun ein Verzeichnis für
Pigeonhole? &ndash;> Nein!</p>

<h2>Pigeonhole auspacken und umbenennen</h2>

<ul>
<li><code>bzip2 -cd ../dovecot_2.2.1.orig-pigeonhole.tar.bz2|tar xf -</code></li>
<li><code>mv dovecot-2-2-pigeonhole-70f0b7140939 pigeonhole</code></li>
</ul>


<h2>Dovecot neu erzeugen</h2>

<ul>
<li><code>dpkg-buildpackage</code></li>
</ul>


<p>Nun klappt&rsquo;s!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pigeonhole für für mein Debian-Paket von Dovecot]]></title>
    <link href="http://uli-heller.github.com/blog/2013/04/15/pigeonhole/"/>
    <updated>2013-04-15T06:00:00+02:00</updated>
    <id>http://uli-heller.github.com/blog/2013/04/15/pigeonhole</id>
    <content type="html"><![CDATA[<h1>Dovecot: Einbinden von Pigeonhole</h1>

<p>Mein Dovecot-Debian-Paket beinhaltet u.a. auch Pigeonhole.
Pigeonhole wird separat zum Herunterladen angeboten, im Debian-Paket
erscheint es aber als Patch unterhalb von debian/patches. Das ist ein
gewisses Problem, weil man das heruntergeladene Paket dann immer erst
in einen Patch umwandeln muß.</p>

<p>Deshalb mein Ziel: Ich würde das Pigeonhole-Paket gerne möglichst
unverändert in&rsquo;s Dovecot-Debian-Paket einbinden!</p>

<!-- more -->


<h2>Ausgangspunkt</h2>

<p>Ausgangspunkt ist das bestehende Dovecot-Debian-Paket. Es kann mit
<code>dpkg-buildpackage</code> neu erzeugt werden.</p>

<h2>Pakete herunterladen</h2>

<ul>
<li><a href="http://dovecot.org/releases/2.2/dovecot-2.2.0.tar.gz">Dovecot-2.2.0</a></li>
<li><a href="http://hg.rename-it.nl/dovecot-2.2-pigeonhole/archive/tip.tar.bz2">Pigeonhole für Dovecot-2.2.0</a></li>
</ul>


<h2>Dovecot-Debian-Paket anpassen auf neue Version</h2>

<ul>
<li><code>uupdate -u ../dovecot-2.2.0.tar.gz -v 2:2.2.0</code></li>
<li><code>cd ../dovecot-2.2.0</code></li>
</ul>


<h2>Verweise auf Pigeonhole-Patch entfernen</h2>

<ul>
<li><code>cd ./dovecot-2.2.0</code></li>
<li><code>rm debian/patches/pigeonhole.patch</code></li>
<li><code>sed -i "s/pigeonhole.patch/#pigeonhole.patch/" debian/patches/series</code></li>
</ul>


<h2>Verwendung des Pigeonhole-Paketes vorbereiten</h2>

<ul>
<li><code>cp dovecot-2-2-pigeonhole-70f0b7140939.tar.bz2 dovecot_2.2.0.orig-pigeonhole.tar.bz2</code></li>
<li><code>cd ./dovecot-2.2.0</code></li>
<li><code>mkdir pigeonhole</code></li>
<li><code>tar -C pigeonhole --strip-components=1 -jxf ../dovecot_2.2.0.orig-pigeonhole.tar.bz2</code></li>
</ul>


<h2>Paket neu erzeugen</h2>

<ul>
<li><code>cd ./dovecot-2.2.0</code></li>
<li><code>dpkg-buildpackage</code></li>
</ul>


<h2>Links</h2>

<ul>
<li><a href="http://raphaelhertzog.com/2010/09/07/how-to-use-multiple-upstream-tarballs-in-debian-source-packages/">http://raphaelhertzog.com/2010/09/07/how-to-use-multiple-upstream-tarballs-in-debian-source-packages/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quilt für mein Debian-Paket von Git]]></title>
    <link href="http://uli-heller.github.com/blog/2013/04/14/quilt-fuer-gitdeb/"/>
    <updated>2013-04-14T12:00:00+02:00</updated>
    <id>http://uli-heller.github.com/blog/2013/04/14/quilt-fuer-gitdeb</id>
    <content type="html"><![CDATA[<h1>Quilt: Umstellung der Patchverwaltung meines Git-Debian-Paketes auf Quilt</h1>

<p>Mein Git-Debian-Paket verwendet bislang keine vernünftige Patchverwaltung.
Stattdessen werden bei der Erzeugung des Paketes einfach alle Patches
unterhalb von debian/diff der Reihe nach angewandt. Blöderweise fallen so
gescheiterte Patchanwendungen nicht auf, außerdem werden im Source-Paket
teilweise Original-Dateien modifiziert &ndash; vermutlich weil einige Patches
nicht sauber zurückgerollt werden.</p>

<p>Also: Ich will Quilt haben!</p>

<!-- more -->


<h2>Sichtung des Debian-Paketes von Subversion</h2>

<ul>
<li>Patches liegen unter debian/patches und nicht unter debian/diff</li>
<li>Es gibt eine Datei namens debian/patches/series, die alle Patches auflistet</li>
<li>In debian/rules sind einige Änderungen vorzunehmen</li>
</ul>


<p>Die ersten beiden Punkte sind schnell erledigt:</p>

<ul>
<li><code>mv debian/diff debian/patches</code></li>
<li><code>cd debian/patches; (ls|grep -v series) &gt;series</code></li>
</ul>


<p>Bleibt noch die Anpassung von debian/rules!</p>

<h2>Anpassungen an &ldquo;debian/rules&rdquo;</h2>

<p>An der Datei &ldquo;debian/rules&rdquo; müssen qualitativ diese Änderungen vorgenommen
werden:</p>

<ul>
<li>Einbinden der Datei /usr/share/quilt/quilt.make</li>
<li>Ziele &ldquo;patch&rdquo; und &ldquo;patch-stamp&rdquo; entfernen</li>
<li>Ziele &ldquo;debian/stamp-autogen&rdquo; und &ldquo;debian/stamp-configure&rdquo; neu aufnehmen
Bei &ldquo;debian/stamp-configure&rdquo; wird ein Verweis auf &ldquo;patches&rdquo; angelegt</li>
<li>Verweise auf &ldquo;patch-stamp&rdquo; ersetzen durch &ldquo;$(QUILT_STAMPFN)&rdquo;</li>
<li>Im Ziel &ldquo;clean&rdquo; diese Änderungen vornehmen:

<ul>
<li>Neue Abhängigkeit zu &ldquo;unpatch&rdquo; festlegen</li>
<li>Neuer Aufruf: dh_testdir</li>
<li>Neuer Aufruf: dh_clean</li>
<li>Verweis auf &ldquo;patches&rdquo; löschen</li>
<li>Manuelle Logik zum Zurücknehmen der Patches entfernen</li>
</ul>
</li>
</ul>


<p>Die Änderungen sind im nachfolgenden DIFF zusammengefasst.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Anpassungen an debian/rules </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>&amp;mdash;&amp;ndash; ../git-1.8.2.1_ok/debian/rules  2013-04-13 19:55:00.061153212 +0200
</span><span class='line'><span class="gi">+++ debian/rules    2013-04-14 09:36:24.782564149 +0200</span>
</span><span class='line'><span class="gu">@@ -37,19 +37,30 @@</span>
</span><span class='line'> TMP =$(shell pwd)/tmp
</span><span class='line'> GIT =$(shell pwd)/debian/git&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;-patch: deb-checkdir patch-stamp
</span><span class='line'><span class="gd">-patch-stamp:</span>
</span><span class='line'>&amp;ndash;   cp gitk-git/gitk gitk-git/gitk.uli.orig
</span><span class='line'>&amp;ndash;   for i in &lt;code&gt;ls -1 debian/diff/*.diff debian/diff/*.patch \
</span><span class='line'><span class="gd">-       2&amp;gt;/dev/null || :&lt;/code&gt;; do \</span>
</span><span class='line'>&amp;ndash;     patch -p1 -N -r- &amp;lt;$$i || test $$? = 1 || exit 1; \
</span><span class='line'>&amp;ndash;   done
</span><span class='line'>&amp;ndash;   touch patch-stamp
</span><span class='line'><span class="gi">+include /usr/share/quilt/quilt.make</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+debian/stamp-autogen:  $(QUILT_STAMPFN)</span>
</span><span class='line'><span class="gi">+   $(DONT_BE_ROOT)</span>
</span><span class='line'><span class="gi">+   ./autogen.sh</span>
</span><span class='line'><span class="gi">+   touch $@</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+debian/stamp-configure:    $(QUILT_STAMPFN) debian/stamp-autogen</span>
</span><span class='line'><span class="gi">+   dh_testdir</span>
</span><span class='line'><span class="gi">+   test -e patches || ln -s debian/patches patches</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+#patch: deb-checkdir patch-stamp</span>
</span><span class='line'><span class="gi">+#patch-stamp:</span>
</span><span class='line'><span class="gi">+#  cp gitk-git/gitk gitk-git/gitk.uli.orig</span>
</span><span class='line'><span class="gi">+#  for i in &lt;code&gt;ls -1 debian/diff/*.diff debian/diff/*.patch \</span>
</span><span class='line'><span class="gi">+#      2&amp;gt;/dev/null || :&lt;/code&gt;; do \</span>
</span><span class='line'><span class="gi">+#    patch -p1 -N -r- &amp;lt;$$i || test $$? = 1 || exit 1; \</span>
</span><span class='line'><span class="gi">+#  done</span>
</span><span class='line'><span class="gi">+#  touch patch-stamp&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;p&gt; build: build-arch build-indep&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; build-arch: deb-checkdir build-arch-stamp
</span><span class='line'><span class="gd">-build-arch-stamp: patch-stamp</span>
</span><span class='line'><span class="gi">+build-arch-stamp: $(QUILT_STAMPFN)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;-$(CC) -v
</span><span class='line'>DESTDIR=&#39;$(GIT)&#39; $(MAKE) all $(OPTS)
</span><span class='line'>cd contrib/subtree; DESTDIR=&#39;$(GIT)&#39; $(MAKE) all $(OPTS)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;@@ -66,7 +77,7 @@&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;touch build-arch-stamp
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; build-indep: deb-checkdir build-indep-stamp
</span><span class='line'><span class="gd">-build-indep-stamp: patch-stamp build-arch-stamp</span>
</span><span class='line'><span class="gi">+build-indep-stamp: $(QUILT_STAMPFN) build-arch-stamp&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;: &#39;Work around bug #478524&#39;
</span><span class='line'>set -e; if test &#39;$(BUILD_DOCS)&#39; = 1; \
</span><span class='line'>then \
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;@@ -74,14 +85,17 @@&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;fi
</span><span class='line'>touch build-indep-stamp
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;-clean: deb-checkdir
</span><span class='line'><span class="gi">+clean: deb-checkdir unpatch</span>
</span><span class='line'><span class="gi">+   dh_testdir</span>
</span><span class='line'><span class="gi">+   dh_clean</span>
</span><span class='line'><span class="gi">+   $(RM) patches&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;$(MAKE) clean $(OPTS)
</span><span class='line'>cd contrib/subtree; $(MAKE) clean $(OPTS)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;! test -e patch-stamp || \&lt;/li&gt;
</span><span class='line'>&lt;li&gt;  for i in `ls -1r debian/diff/&lt;em&gt;.diff debian/diff/&lt;/em&gt;.patch \&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;pre&gt;&lt;code&gt;  2&amp;gt;/dev/null || :`; do \
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;pre&gt;&lt;code&gt;patch -p1 -NR -r- &amp;lt;$$i || test $$? = 1 || exit 1; \
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;  done
</span><span class='line'><span class="gi">+#  ! test -e patch-stamp || \</span>
</span><span class='line'><span class="gi">+#    for i in &lt;code&gt;ls -1r debian/diff/*.diff debian/diff/*.patch \</span>
</span><span class='line'><span class="gi">+#        2&amp;gt;/dev/null || :&lt;/code&gt;; do \</span>
</span><span class='line'><span class="gi">+#      patch -p1 -NR -r- &amp;lt;$$i || test $$? = 1 || exit 1; \</span>
</span><span class='line'><span class="gi">+#    done</span>
</span><span class='line'>rm -rf &amp;lsquo;$(TMP)&amp;rsquo;
</span><span class='line'>rm -f patch-stamp build-arch-stamp build-indep-stamp
</span><span class='line'>rm -rf &amp;lsquo;$(GIT)&amp;rsquo; &amp;lsquo;$(GIT)&amp;rsquo;-doc &amp;lsquo;$(GIT)&amp;rsquo;-arch &amp;lsquo;$(GIT)&amp;rsquo;-cvs
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ul>


<h2>Neuerzeugung des Paketes</h2>

<p>Nun kann versucht werden, das Paket neu zu erzeugen mit <code>dpkg-buildpackage</code>.
Erwartungsgemäß scheitert die Erzeugung, weil einige Patches nicht sauber
durchlaufen. Korrigiert habe ich das so:</p>

<ul>
<li>In &ldquo;debian/patches/series&rdquo; folgende Patches deaktiviert:

<ul>
<li>0005-gitk-use-symbolic-font-names-sans-and-monospace-when-.diff</li>
<li>0006-gitk-Skip-over-AUTHOR-COMMIT_DATE-when-searching-all-.diff</li>
</ul>
</li>
<li>Bei allen übrigen Patches:

<ul>
<li><code>quilt push -f</code></li>
<li><code>quilt refresh</code></li>
<li><code>dpkg-buildpackage</code></li>
<li>&hellip; so oft wiederholen, bis es durchläuft</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
